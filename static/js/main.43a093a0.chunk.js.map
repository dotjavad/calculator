{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["numberWithCommas","x","toString","replace","isFloat","n","Number","App","useState","currentVal","setCurrentVal","tempVal","setTempVal","totalVal","setTotalVal","status","setStatus","operator","setOperator","calcTotal","total","toFixed","handleOperator","evt","inputKey","target","dataset","key","String","indexOf","startsWith","totalMulty","parseFloat","totalEqual","isFinite","className","data-key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43a093a0.chunk.js","sourcesContent":["const numberWithCommas = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconst isFloat = (n) => {\n    return Number(n) === n && n % 1 !== 0;\n}\n\nexport { numberWithCommas, isFloat };\n\n","import React, { useState } from 'react';\nimport { numberWithCommas, isFloat } from './helpers';\n\nimport './App.css';\n\nfunction App() {\n\n  const [currentVal, setCurrentVal] = useState('0');\n  const [tempVal, setTempVal] = useState();\n  const [totalVal, setTotalVal] = useState();\n\n  const [status, setStatus] = useState(false);\n  const [operator, setOperator] = useState('');\n\n  const calcTotal = (total) => {\n    setTotalVal(isFloat(total) ? total.toFixed(1) : total);\n    setCurrentVal(isFloat(total) ? total.toFixed(1) : total);\n  }\n\n  const handleOperator = (evt) => {\n\n    const inputKey = evt.target.dataset.key;\n\n    switch (inputKey) {\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n\n        if (status) {\n          setTempVal(inputKey);\n          setCurrentVal(inputKey);\n          setStatus(!status)\n        } else {\n          setCurrentVal(currentVal + inputKey);\n          setTempVal(currentVal + inputKey);\n        }\n\n        if (String(currentVal).indexOf('.') === -1 && String(currentVal).startsWith('0')) {\n          setCurrentVal(inputKey);\n          setTempVal(inputKey);\n        }\n\n        break;\n\n      case '+':\n\n        if (typeof tempVal !== 'undefined') {\n          if (status === false) {\n            let totalMulty = (typeof totalVal !== 'undefined') ? parseFloat(totalVal) + Number(tempVal) : Number(tempVal);\n            calcTotal(totalMulty);\n          }\n          setStatus(true);\n          setOperator('+');\n        }\n\n        break;\n\n      case '-':\n        if (typeof tempVal !== 'undefined') {\n          if (status === false) {\n            let totalMulty = (typeof totalVal !== 'undefined') ? parseFloat(totalVal) - Number(tempVal) : Number(tempVal);\n            calcTotal(totalMulty);\n          }\n          setStatus(true);\n          setOperator('-');\n        }\n\n        break;\n\n      case '*':\n\n        if (typeof tempVal !== 'undefined') {\n          if (status === false) {\n            let totalMulty = (typeof totalVal !== 'undefined') ? parseFloat(totalVal) * Number(tempVal) : Number(tempVal);\n            calcTotal(totalMulty);\n          }\n          setStatus(true);\n          setOperator('*');\n        }\n\n        break;\n\n      case '/':\n\n        if (typeof tempVal !== 'undefined') {\n          if (status === false) {\n            let totalMulty = (typeof totalVal !== 'undefined') ? parseFloat(totalVal) / Number(tempVal) : Number(tempVal);\n            calcTotal(totalMulty);\n          }\n          setStatus(true);\n          setOperator('/');\n        }\n\n        break;\n\n      case '=':\n\n        if (operator === '+') {\n          let totalEqual = parseFloat(totalVal) + Number(tempVal);\n          calcTotal(totalEqual);\n        }\n\n        if (operator === '-') {\n          let totalEqual = parseFloat(totalVal) - Number(tempVal);\n          calcTotal(totalEqual);\n        }\n\n        if (operator === '*') {\n          let totalEqual = parseFloat(totalVal) * Number(tempVal);\n          calcTotal(totalEqual);\n        }\n\n        if (operator === '/') {\n          let totalEqual = parseFloat(totalVal) / Number(tempVal);\n          calcTotal(totalEqual);\n          if (!isFinite(totalEqual)) {\n            setStatus(true);\n            setTotalVal();\n          }\n        }\n\n        break;\n\n      case 'comma':\n\n        if (currentVal.indexOf('.') === -1) {\n          setCurrentVal(currentVal + '.');\n          setTempVal(currentVal + '.');\n        }\n\n        break;\n\n      case 'inv':\n\n        if (!currentVal.startsWith('-')) {\n          setCurrentVal(`-${currentVal}`);\n          setTempVal(`-${tempVal}`);\n        } else {\n          setCurrentVal(currentVal.replace('-', ''));\n          setTempVal(tempVal.replace('-', ''));\n        }\n\n        break;\n\n      case 'clear':\n\n        setCurrentVal('0');\n        setTempVal();\n        setTotalVal();\n        setStatus(false);\n\n        break;\n\n      default:\n      //Nothing\n    }\n  }\n\n  return (\n    <div className=\"calc\">\n      <div className=\"result\">\n        <div className=\"current\">\n          <h1>{numberWithCommas(currentVal)}</h1>\n        </div>\n      </div>\n      <div className=\"buttons\">\n        <div data-key=\"clear\" onClick={(evt) => handleOperator(evt)}>c</div>\n        <div data-key=\"inv\" onClick={(evt) => handleOperator(evt)}>+ / -</div>\n        <div data-key=\"%\" onClick={(evt) => handleOperator(evt)}>%</div>\n        <div data-key=\"*\" onClick={(evt) => handleOperator(evt)}>x</div>\n        <div data-key=\"7\" onClick={(evt) => handleOperator(evt)}>7</div>\n        <div data-key=\"8\" onClick={(evt) => handleOperator(evt)}>8</div>\n        <div data-key=\"9\" onClick={(evt) => handleOperator(evt)}>9</div>\n        <div data-key=\"/\" onClick={(evt) => handleOperator(evt)}>/</div>\n        <div data-key=\"4\" onClick={(evt) => handleOperator(evt)}>4</div>\n        <div data-key=\"5\" onClick={(evt) => handleOperator(evt)}>5</div>\n        <div data-key=\"6\" onClick={(evt) => handleOperator(evt)}>6</div>\n        <div data-key=\"-\" onClick={(evt) => handleOperator(evt)}>-</div>\n        <div data-key=\"1\" onClick={(evt) => handleOperator(evt)}>1</div>\n        <div data-key=\"2\" onClick={(evt) => handleOperator(evt)}>2</div>\n        <div data-key=\"3\" onClick={(evt) => handleOperator(evt)}>3</div>\n        <div data-key=\"+\" onClick={(evt) => handleOperator(evt)}>+</div>\n        <div data-key=\"0\" onClick={(evt) => handleOperator(evt)}>0</div>\n        <div data-key=\"comma\" onClick={(evt) => handleOperator(evt)}>.</div>\n        <div data-key=\"=\" onClick={(evt) => handleOperator(evt)}>=</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}